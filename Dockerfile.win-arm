FROM ubuntu:22.04

# --------------------
# Build arguments
# --------------------
ARG QT_VERSION=6.9.1
ARG QT_MODULE=qtbase

# --------------------
# 環境変数
# --------------------
ENV DEBIAN_FRONTEND=noninteractive
ENV QT6_SRC_DIR=/build/qt6
ENV QT6_DIR=/qt6
ENV QT6_ARM_PREFIX=/opt/qt6-arm
ENV QT6_HOST_PREFIX=/opt/qt6-host
ENV CMAKE_GENERATOR=Ninja
ENV CXXFLAGS="-fuse-ld=lld"


# --------------------
# 基本依存
# --------------------
RUN apt-get update && apt-get install -y \
    git curl wget unzip tar xz-utils build-essential \
    cmake ninja-build python3 python3-pip \
    libssl-dev \
    clang lld llvm pkg-config mingw-w64 yasm nasm perl autoconf \
    gperf \
    libtool \
    automake \
    ca-certificates \
    libxcb1-dev libxcb-util-dev libx11-dev \
    libxext-dev libxrender-dev libxkbcommon-dev \
    libx11-xcb-dev \
    libxcb-cursor-dev \
    libxcb-glx0-dev \
    libxcb-icccm4-dev \
    libxcb-image0-dev \
    libxcb-keysyms1-dev \
    libxcb-randr0-dev \
    libxcb-render-util0-dev \
    libxcb-shape0-dev \
    libxcb-shm0-dev \
    libxcb-sync-dev \
    libxcb-util-dev \
    libxcb-xfixes0-dev \
    libxcb-xkb-dev \
    libxcb1-dev \
    libxext-dev \
    libxfixes-dev \
    libxi-dev \
    libxkbcommon-dev \
    libxkbcommon-x11-dev \
    libxrender-dev \
    libdbus-1-dev \
    libgl1-mesa-dev \
    libglu1-mesa-dev \
    libglib2.0-dev \
    libgtk-3-dev \
    libssl-dev \
    libfontconfig1-dev \
    meson \
    python3-pip \
    pkg-config \
    libxcb-dri2-0-dev \
    && rm -rf /var/lib/apt/lists/*

# --------------------
# Qt ソース取得
# --------------------
WORKDIR /build
# RUN curl -LO https://download.qt.io/official_releases/qt/${QT_VERSION%.*}/${QT_VERSION}/single/qt-everywhere-src-${QT_VERSION}.tar.xz && \
#    tar -xf qt-everywhere-src-${QT_VERSION}.tar.xz && \
RUN curl -LO https://download.qt.io/official_releases/qt/${QT_VERSION%.*}/${QT_VERSION}/submodules/${QT_MODULE}-everywhere-src-${QT_VERSION}.tar.xz && \
    tar -xf ${QT_MODULE}-everywhere-src-${QT_VERSION}.tar.xz && \
    mkdir -p qt6 && \
    cp -r ${QT_MODULE}-everywhere-src-${QT_VERSION} qt6 && \
    cd qt6 && \
    mv ${QT_MODULE}-everywhere-src-${QT_VERSION} ${QT_MODULE} && \
    cd /build && tar -cf qt6-src.tar qt6

# --------------------
# ホスト向け Qt ツールのビルド
# --------------------
# ホスト用 OpenSSL ビルド (x86_64向け)
ENV OPENSSL_HOST_PREFIX=/opt/openssl-host
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/local/lib/x86_64-linux-gnu/pkgconfig
WORKDIR ${QT6_SRC_DIR}/qtbase
RUN ./configure \
    -prefix ${QT6_HOST_PREFIX} \
    -release \
    -static \
    -opensource -confirm-license \
    -nomake tests -nomake examples \
    -no-gdb-index \
    -openssl-linked \
    -I${OPENSSL_HOST_PREFIX}/include \
    -L${OPENSSL_HOST_PREFIX}/lib　|| \
    { echo "----- CMakeError.log -----"; cat CMakeFiles/CMakeError.log || true; \
      echo "----- CMakeOutput.log -----"; cat CMakeFiles/CMakeOutput.log || true;  exit 1; } && \
    cmake --build . --parallel && \
    cmake --install .


# クロス用 OpenSSL ビルド (aarch64-w64-mingw32向け)
ENV OPENSSL_ARM_PREFIX=/opt/openssl-arm
ENV PATH="/opt/qt6-host/bin:/opt/llvm-mingw/bin:$PATH"
ENV OPENSSL_ARM_PREFIX=/opt/openssl-arm
ENV PKG_CONFIG_PATH="${OPENSSL_ARM_PREFIX}/lib/pkgconfig"
# --------------------
# llvm-mingw の導入
# --------------------
WORKDIR /opt
RUN wget https://github.com/mstorsjo/llvm-mingw/releases/download/20250514/llvm-mingw-20250514-msvcrt-ubuntu-22.04-x86_64.tar.xz && \
    tar -xf llvm-mingw-20250514-msvcrt-ubuntu-22.04-x86_64.tar.xz && \
    mv llvm-mingw-*/ llvm-mingw && \
    rm llvm-mingw-*.tar.xz
RUN aarch64-w64-mingw32-clang --version

# --------------------
# OpenSSL (static for Windows ARM)
# --------------------
WORKDIR /build/zlib
RUN curl -LO https://zlib.net/zlib-1.3.1.tar.gz && \
    tar xf zlib-1.3.1.tar.gz && cd zlib-1.3.1 && \
    CC=aarch64-w64-mingw32-gcc AR=aarch64-w64-mingw32-ar \
    RANLIB=aarch64-w64-mingw32-ranlib \
    ./configure --static --prefix=${MXE_PREFIX}/aarch64-w64-mingw32.static && \
    make -j$(nproc) && make install

WORKDIR /build/openssl
RUN git clone --branch openssl-3.3.0 https://github.com/openssl/openssl.git . && \
    ./Configure mingw64-aarch64 no-shared no-dso no-asm no-tests no-apps \
        --cross-compile-prefix=aarch64-w64-mingw32- \
        --prefix=${OPENSSL_ARM_PREFIX} \
        --with-zlib-include=${MXE_PREFIX}/aarch64-w64-mingw32.static/include \
        --with-zlib-lib=${MXE_PREFIX}/aarch64-w64-mingw32.static/lib && \
    make -j$(nproc) && make install_sw

# libpng
WORKDIR /build
RUN wget https://download.sourceforge.net/libpng/libpng-1.6.43.tar.gz && \
    tar xf libpng-1.6.43.tar.gz && cd libpng-1.6.43 && \
    ./configure --host=$TARGET --prefix=$PREFIX --enable-static --disable-shared && \
    make && make install

# libjpeg (libjpeg-turbo)
RUN git clone https://github.com/libjpeg-turbo/libjpeg-turbo.git && \
    cd libjpeg-turbo && mkdir build && cd build && \
    cmake .. -G"Unix Makefiles" \
        -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchains/mingw.toolchain.cmake \
        -DCMAKE_INSTALL_PREFIX=$PREFIX \
        -DCMAKE_BUILD_TYPE=Release \
        -DENABLE_SHARED=OFF \
        -DCMAKE_SYSTEM_NAME=Windows && \
    make && make install

# freetype
RUN wget https://download.savannah.gnu.org/releases/freetype/freetype-2.13.2.tar.gz && \
    tar xf freetype-2.13.2.tar.gz && cd freetype-2.13.2 && \
    ./configure --host=$TARGET --prefix=$PREFIX --enable-static --disable-shared && \
    make && make install

# harfbuzz
RUN git clone https://github.com/harfbuzz/harfbuzz.git && \
    cd harfbuzz && mkdir build && cd build && \
    meson setup --cross-file=/usr/share/mingw/toolchain-$TARGET.meson \
        --prefix=$PREFIX --default-library=static .. && \
    ninja && ninja install

# double-conversion
RUN git clone https://github.com/google/double-conversion.git && \
    cd double-conversion && mkdir build && cd build && \
    cmake .. -G"Unix Makefiles" \
        -DCMAKE_TOOLCHAIN_FILE=../../cmake/mingw.toolchain.cmake \
        -DCMAKE_INSTALL_PREFIX=$PREFIX \
        -DBUILD_SHARED_LIBS=OFF && \
    make && make install

# sqlite3
RUN wget https://sqlite.org/2024/sqlite-autoconf-3450100.tar.gz && \
    tar xf sqlite-autoconf-3450100.tar.gz && cd sqlite-autoconf-3450100 && \
    ./configure --host=$TARGET --prefix=$PREFIX --enable-static --disable-shared && \
    make && make install

# --------------------
# Qt ソースをクリーンな状態で展開し直す
# --------------------
RUN rm -rf /build/qt6 && tar -xf /build/qt6-src.tar -C /build

# --------------------
# Windows ARM 用 Qt のビルド
# --------------------
WORKDIR ${QT6_SRC_DIR}/qtbase

# クロスコンパイラ確認
RUN clang --target=aarch64-w64-mingw32 --version
RUN echo '.globl _start\n_start:\n nop' > test.s \
 && clang --target=aarch64-w64-mingw32 -c test.s -o test.o \
 && file test.o

# Qt configure 実行
RUN ./configure \
    -prefix ${QT6_ARM_PREFIX} \
    -cmake-generator "Ninja" \
    -release \
    -static \
    -opensource -confirm-license \
    -xplatform win32-clang-g++ \
    -device-option CMAKE_SYSTEM_NAME=Windows \
    -device-option CMAKE_SYSTEM_PROCESSOR=aarch64 \
    -device-option CMAKE_C_COMPILER=/opt/llvm-mingw/bin/clang \
    -device-option CMAKE_CXX_COMPILER=/opt/llvm-mingw/bin/clang++ \
    -device-option CMAKE_ASM_COMPILER=/opt/llvm-mingw/bin/clang \
    -device-option CMAKE_C_FLAGS="--target=aarch64-w64-mingw32" \
    -device-option CMAKE_CXX_FLAGS="--target=aarch64-w64-mingw32" \
    -device-option CMAKE_ASM_FLAGS="--target=aarch64-w64-mingw32" \
    -device-option CMAKE_FIND_ROOT_PATH=/opt/llvm-mingw/aarch64-w64-mingw32 \
    -openssl-linked \
    -I${OPENSSL_ARM_PREFIX}/include \
    -L${OPENSSL_ARM_PREFIX}/lib \
    -nomake tests -nomake examples \
    -no-feature-shared \
    -no-dbus \
    -no-feature-accessibility \
    -no-feature-draganddrop \
    -no-feature-fscompleter \
    -no-feature-concurrent \
    -no-feature-animation \
    || { \
        echo "----- CMakeError.log -----"; cat CMakeFiles/CMakeError.log || true; \
        echo "----- CMakeOutput.log -----"; cat CMakeFiles/CMakeOutput.log || true; \
        echo "----- CMakeCache.txt -----"; cat CMakeCache.txt || true; \
        exit 1; \
    } && \
    cmake --build . --parallel && \
    cmake --install . --prefix ${QT6_ARM_PREFIX}

# --------------------
# 完了
# --------------------
RUN echo "✅ Qt for Windows ARM built and installed at ${QT6_ARM_PREFIX}"
