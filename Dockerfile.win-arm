FROM ubuntu:22.04

# --------------------
# Build arguments
# --------------------
ARG QT_VERSION=6.9.0
ARG QT_MODULE=qtbase

# --------------------
# 環境変数
# --------------------
ENV DEBIAN_FRONTEND=noninteractive
ENV QT6_SRC_DIR=/build/qt6
ENV QT6_DIR=/qt6
ENV QT6_ARM_PREFIX=/opt/qt6-arm
ENV QT6_HOST_PREFIX=/opt/qt6-host
ENV CMAKE_GENERATOR=Ninja
ENV CXXFLAGS="-fuse-ld=lld"


# --------------------
# 基本依存
# --------------------
RUN apt-get update && apt-get install -y \
    git curl wget unzip tar xz-utils build-essential \
    cmake ninja-build python3 python3-pip \
    libssl-dev \
    clang lld llvm pkg-config mingw-w64 yasm nasm perl autoconf \
    gperf \
    libtool \
    automake \
    ca-certificates \
    libxcb1-dev libxcb-util-dev libx11-dev \
    libxext-dev libxrender-dev libxkbcommon-dev \
    libx11-xcb-dev \
    libxcb-cursor-dev \
    libxcb-glx0-dev \
    libxcb-icccm4-dev \
    libxcb-image0-dev \
    libxcb-keysyms1-dev \
    libxcb-randr0-dev \
    libxcb-render-util0-dev \
    libxcb-shape0-dev \
    libxcb-shm0-dev \
    libxcb-sync-dev \
    libxcb-util-dev \
    libxcb-xfixes0-dev \
    libxcb-xkb-dev \
    libxcb1-dev \
    libxext-dev \
    libxfixes-dev \
    libxi-dev \
    libxkbcommon-dev \
    libxkbcommon-x11-dev \
    libxrender-dev \
    libdbus-1-dev \
    libgl1-mesa-dev \
    libglu1-mesa-dev \
    libglib2.0-dev \
    libgtk-3-dev \
    libssl-dev \
    libfontconfig1-dev \
    meson \
    python3-pip \
    pkg-config \
    libxcb-dri2-0-dev \
    && rm -rf /var/lib/apt/lists/*

# --------------------
# Qt ソース取得
# --------------------
WORKDIR /build
# RUN curl -LO https://download.qt.io/official_releases/qt/${QT_VERSION%.*}/${QT_VERSION}/single/qt-everywhere-src-${QT_VERSION}.tar.xz && \
#    tar -xf qt-everywhere-src-${QT_VERSION}.tar.xz && \
RUN curl -LO https://download.qt.io/official_releases/qt/${QT_VERSION%.*}/${QT_VERSION}/submodules/${QT_MODULE}-everywhere-src-${QT_VERSION}.tar.xz && \
    tar -xf ${QT_MODULE}-everywhere-src-${QT_VERSION}.tar.xz && \
    mkdir -p qt6 && \
    cp -r ${QT_MODULE}-everywhere-src-${QT_VERSION} qt6 && \
    cd qt6 && \
    mv ${QT_MODULE}-everywhere-src-${QT_VERSION} ${QT_MODULE} && \
    cd /build && tar -cf qt6-src.tar qt6

# --------------------
# ホスト向け Qt ツールのビルド
# --------------------
# ホスト用 OpenSSL ビルド (x86_64向け)
ENV OPENSSL_HOST_PREFIX=/opt/openssl-host
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/local/lib/x86_64-linux-gnu/pkgconfig
WORKDIR ${QT6_SRC_DIR}/qtbase
RUN ./configure \
    -prefix ${QT6_HOST_PREFIX} \
    -release \
    -static \
    -opensource -confirm-license \
    -nomake tests -nomake examples \
    -no-gdb-index \
    -openssl-linked \
    -I${OPENSSL_HOST_PREFIX}/include \
    -L${OPENSSL_HOST_PREFIX}/lib　|| \
    { echo "----- CMakeError.log -----"; cat CMakeFiles/CMakeError.log || true; \
      echo "----- CMakeOutput.log -----"; cat CMakeFiles/CMakeOutput.log || true;  exit 1; } && \
    cmake --build . --parallel && \
    cmake --install .


# クロス用 OpenSSL ビルド (aarch64-w64-mingw32向け)
ENV OPENSSL_ARM_PREFIX=/opt/openssl-arm
ENV PATH="/opt/qt6-host/bin:/opt/llvm-mingw/bin:$PATH"
ENV OPENSSL_ARM_PREFIX=/opt/openssl-arm
ENV PKG_CONFIG_PATH="${OPENSSL_ARM_PREFIX}/lib/pkgconfig"
# --------------------
# llvm-mingw の導入
# --------------------
WORKDIR /opt
RUN wget https://github.com/mstorsjo/llvm-mingw/releases/download/20250514/llvm-mingw-20250514-msvcrt-ubuntu-22.04-x86_64.tar.xz && \
    tar -xf llvm-mingw-20250514-msvcrt-ubuntu-22.04-x86_64.tar.xz && \
    mv llvm-mingw-*/ llvm-mingw && \
    rm llvm-mingw-*.tar.xz
RUN aarch64-w64-mingw32-clang --version

# --------------------
# OpenSSL (static for Windows ARM)
# --------------------
WORKDIR /build/openssl
RUN git clone --branch openssl-3.3.0 https://github.com/openssl/openssl.git . && \
    ./Configure mingw no-shared no-dso no-asm no-tests no-apps \
        --cross-compile-prefix=aarch64-w64-mingw32- \
        --prefix=${OPENSSL_ARM_PREFIX} && \
    make -j$(nproc) && make install_sw

# --------------------
# Windows ARM 用 mkspecs を作成
# --------------------
WORKDIR ${QT6_SRC_DIR}/qtbase/mkspecs
RUN cp -r win32-clang-msvc win64-arm64-clang && \
    sed -i 's/x86_64-w64-mingw32/aarch64-w64-mingw32/g' win64-arm64-clang/qmake.conf && \
    echo 'QMAKE_TARGET.arch = arm64' >> win64-arm64-clang/qmake.conf && \
    echo 'QMAKE_CXX = aarch64-w64-mingw32-clang++' >> win64-arm64-clang/qmake.conf && \
    echo 'QMAKE_CC = aarch64-w64-mingw32-clang' >> win64-arm64-clang/qmake.conf && \
    echo 'QMAKE_AR = aarch64-w64-mingw32-ar' >> win64-arm64-clang/qmake.conf && \
    echo 'QMAKE_OBJCOPY = aarch64-w64-mingw32-objcopy' >> win64-arm64-clang/qmake.conf && \
    echo 'QMAKE_NM = aarch64-w64-mingw32-nm' >> win64-arm64-clang/qmake.conf && \
    echo 'QMAKE_STRIP = aarch64-w64-mingw32-strip' >> win64-arm64-clang/qmake.conf && \
    echo 'QMAKE_LINK = aarch64-w64-mingw32-clang++' >> win64-arm64-clang/qmake.conf && \
    echo 'QMAKE_LINK_SHLIB = aarch64-w64-mingw32-clang++' >> win64-arm64-clang/qmake.conf

# Qt ソースをクリーンな状態で展開し直す
RUN rm -rf /build/qt6 && tar -xf /build/qt6-src.tar -C /build

# --------------------
# Windows ARM 用 Qt のビルド
# --------------------
WORKDIR ${QT6_SRC_DIR}/qtbase

# 事前チェック（コンパイラとターゲット確認）
RUN which aarch64-w64-mingw32-clang && aarch64-w64-mingw32-clang --version
RUN which aarch64-w64-mingw32-clang++ && aarch64-w64-mingw32-clang++ --version
RUN aarch64-w64-mingw32-clang -v -### -c /dev/null 2>&1 | tee /tmp/clang_target.log
RUN echo '  .text\n  .globl _start\n_start:\n  nop' > test.s \
 && aarch64-w64-mingw32-clang -c test.s -o test.o \
 && file test.o

RUN echo '.text\n.globl _start\n_start:\n nop' > test.s \
 && aarch64-w64-mingw32-clang -c test.s -o test.o \
 && file test.o

# Qt configure 実行

RUN ./configure \
    -prefix ${QT6_ARM_PREFIX} \
    -cmake-generator "Ninja" \
    -release \
    -static \
    -opensource -confirm-license \
    -xplatform win64-arm64-clang \
    -device-option CMAKE_SYSTEM_NAME=Windows \
    -device-option CMAKE_SYSTEM_PROCESSOR=aarch64 \
    -device-option CMAKE_C_COMPILER="/opt/llvm-mingw/bin/aarch64-w64-mingw32-gcc" \
    -device-option CMAKE_CXX_COMPILER="/opt/llvm-mingw/bin/aarch64-w64-mingw32-g++" \
    -device-option CMAKE_ASM_COMPILER=false \
    -device-option CMAKE_FIND_ROOT_PATH=/opt/llvm-mingw/aarch64-w64-mingw32 \
    -openssl-linked \
    -I${OPENSSL_ARM_PREFIX}/include \
    -L${OPENSSL_ARM_PREFIX}/lib \
    -nomake tests -nomake examples \
    -no-feature-shared \
    -no-dbus \
    -no-feature-accessibility \
    -no-feature-draganddrop \
    -no-feature-fscompleter \
    -no-feature-concurrent \
    -no-feature-animation \
    || { \
        echo "----- CMakeError.log -----"; cat CMakeFiles/CMakeError.log || true; \
        echo "----- CMakeOutput.log -----"; cat CMakeFiles/CMakeOutput.log || true; \
        echo "----- CMakeCache.txt -----"; cat CMakeCache.txt || true; \
        exit 1; \
    } && \
    cmake --build . --parallel && \
    cmake --install . --prefix ${QT6_ARM_PREFIX}

# --------------------
# 完了
# --------------------
RUN echo "✅ Qt for Windows ARM built and installed at ${QT6_ARM_PREFIX}"
