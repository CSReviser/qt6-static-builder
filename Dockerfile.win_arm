FROM ubuntu:22.04

ARG QT_VERSION=6.9.0
ENV PATH="/opt/llvm-mingw/bin:$PATH"

# Âü∫Êú¨‰æùÂ≠ò
RUN apt-get update && apt-get install -y \
    git curl wget unzip tar xz-utils build-essential \
    cmake ninja-build python3 python3-pip \
    clang lld llvm pkg-config mingw-w64 yasm nasm perl llvm

# llvm-mingw („ÇØ„É≠„Çπ„Éì„É´„Éâ„ÉÑ„Éº„É´„ÉÅ„Çß„Ç§„É≥)
WORKDIR /opt
RUN wget https://github.com/mstorsjo/llvm-mingw/releases/download/20250514/llvm-mingw-20250514-msvcrt-ubuntu-22.04-x86_64.tar.xz && \
    DIR_NAME=$(tar -tf llvm-mingw-20250514-msvcrt-ubuntu-22.04-x86_64.tar.xz | head -1 | cut -f1 -d"/") && \
    tar -xf llvm-mingw-20250514-msvcrt-ubuntu-22.04-x86_64.tar.xz && \
    mv "$DIR_NAME" llvm-mingw && \
    rm llvm-mingw-*.tar.xz

RUN /opt/llvm-mingw/bin/aarch64-w64-mingw32-clang --version

# OpenSSL for Windows ARM (static)
WORKDIR /build/openssl
RUN git clone --branch openssl-3.3.0 https://github.com/openssl/openssl.git . && \
    ./Configure mingw no-shared no-dso no-asm no-tests no-apps \
        --cross-compile-prefix=aarch64-w64-mingw32- \
        --prefix=/opt/openssl-arm && \
    make -j$(nproc) && make install_sw

# Windows ARM Áî® OpenSSL „ÅÆÈùôÁöÑ„É©„Ç§„Éñ„É©„É™„Å®„Éò„ÉÉ„ÉÄ„ÉºÁ¢∫Ë™ç
RUN set -ex && \
    echo "---- Checking static OpenSSL libraries for Windows ARM ----" && \
    for lib in ssl crypto; do \
        echo "Checking lib$lib.a in /opt/openssl-arm/lib..." && \
        test -f /opt/openssl-arm/lib/lib$lib.a || \
        (echo "Missing static library: lib$lib.a" && exit 1); \
    done && \
    echo "---- Checking OpenSSL headers for Windows ARM ----" && \
    for hdr in ssl.h opensslv.h crypto.h; do \
        echo "Checking $hdr in /opt/openssl-arm/include/openssl..." && \
        test -f /opt/openssl-arm/include/openssl/$hdr || \
        (echo "Missing header: $hdr" && exit 1); \
    done && \
    echo "‚úÖ All required OpenSSL static libraries and headers found."

ENV EXPECTED_MACHINE="IMAGE_FILE_MACHINE_ARMNT"
RUN echo "==> Checking OpenSSL static libraries..." && \
    LIB_DIR="/opt/openssl-arm/lib" && \
    for LIB in libssl.a libcrypto.a; do \
        FULL_PATH="$LIB_DIR/$LIB"; \
        if [ ! -f "$FULL_PATH" ]; then \
            echo "‚ùå $FULL_PATH not found" && exit 1; \
        fi; \
        echo "‚úÖ Found $LIB"; \
        OBJ_FILES=$(ar t "$FULL_PATH"); \
        if [ -z "$OBJ_FILES" ]; then \
            echo "‚ùå $LIB is empty or unreadable" && exit 1; \
        fi; \
        FIRST_OBJ=$(echo "$OBJ_FILES" | head -n 1); \
        ar x "$FULL_PATH" "$FIRST_OBJ"; \
        MACHINE=$(llvm-readobj --file-headers "$FIRST_OBJ" | grep 'Machine:' | awk '{print $2}'); \
        echo "üîç Detected architecture for $FIRST_OBJ: $MACHINE"; \
        if [ "$MACHINE" != "$EXPECTED_MACHINE" ]; then \
            echo "‚ùå Architecture mismatch in $LIB: expected $EXPECTED_MACHINE, found $MACHINE" && \
            exit 1; \
        fi; \
        rm -f "$FIRST_OBJ"; \
    done && \
    echo "‚úÖ All OpenSSL libraries are valid and match expected architecture."

# Qt6 „ÇΩ„Éº„ÇπÂèñÂæó„Å® qtbase „ÅÆ„Åø„ÅÆ„Éì„É´„Éâ
WORKDIR /build
RUN curl -LO https://download.qt.io/official_releases/qt/${QT_VERSION%.*}/${QT_VERSION}/single/qt-everywhere-src-${QT_VERSION}.tar.xz && \
    tar -xf qt-everywhere-src-${QT_VERSION}.tar.xz && \
    mv qt-everywhere-src-${QT_VERSION} qt6


ENV OPENSSL_LIBS="-L/opt/openssl-arm/lib -lssl -lcrypto -lz -lws2_32 -lbcrypt"
ENV OPENSSL_INCDIR="/opt/openssl-arm/include"
ENV OPENSSL_LIBDIR="/opt/openssl-arm/lib"
ENV PKG_CONFIG_PATH="/opt/openssl-arm/lib/pkgconfig"
ENV CXXFLAGS="-fuse-ld=lld"
ENV LDFLAGS="-fuse-ld=lld"

WORKDIR /build/qt6/qtbase
RUN mkdir build && cd build && \
    export OPENSSL_LIBS="$OPENSSL_LIBS" && \
    export OPENSSL_INCDIR="$OPENSSL_INCDIR" && \
    export OPENSSL_LIBDIR="$OPENSSL_LIBDIR" && \
    ../configure \
        -prefix /opt/qt6-arm \
        -static \
        -release \
        -opensource -confirm-license \
        -nomake tests -nomake examples \
        -xplatform win32-g++ \
        -no-feature-openssl \
        -no-feature-openssl-linked \
        -no-dbus \
        -gui -widgets„ÄÄ|| \
    { echo "----- config.summary -----"; cat config.summary || true; \
      echo "----- CMakeError.log -----"; cat CMakeFiles/CMakeError.log || true; \
      echo "----- CMakeOutput.log -----"; cat CMakeFiles/CMakeOutput.log || true; exit 1; } && \
    make -j$(nproc) && \
    make install

# FFmpeg „Éì„É´„Éâ for Windows ARM (static)
WORKDIR /build/ffmpeg
RUN git clone https://github.com/FFmpeg/FFmpeg.git . && \
    ./configure \
        --target-os=mingw32 \
        --arch=aarch64 \
        --cross-prefix=aarch64-w64-mingw32- \
        --enable-cross-compile \
        --disable-shared --enable-static \
        --disable-debug \
        --disable-doc \
        --disable-programs \
        --enable-gpl \
        --enable-version3 \
        --prefix=/opt/ffmpeg-arm && \
    make -j$(nproc) && make install

# ÊúÄÁµÇÊàêÊûúÁâ©ÈÖçÁΩÆ
ENV QT6_ARM_PREFIX=/opt/qt6-arm
ENV OPENSSL_ARM_PREFIX=/opt/openssl-arm
ENV FFMPEG_ARM_PREFIX=/opt/ffmpeg-arm
