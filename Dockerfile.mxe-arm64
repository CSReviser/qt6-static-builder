FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive
ENV MXE_PATH=/opt/armmxe
# --------------------
# Build arguments
# --------------------
ARG QT_VERSION=6.9.0
ARG QT_MODULE=qtbase

# --------------------
# 環境変数
# --------------------
ENV DEBIAN_FRONTEND=noninteractive
ENV QT6_SRC_DIR=/build/qt6
ENV QT6_DIR=/qt6
ENV QT6_ARM_PREFIX=/opt/qt6-arm
ENV QT6_HOST_PREFIX=/opt/qt6-host
ENV CMAKE_GENERATOR=Ninja
ENV CXXFLAGS="-fuse-ld=lld"

# 1. 必要なパッケージをインストール
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    unzip \
    wget \
    cmake \
    python3 \
    python3-pip \
    ninja-build \
    ccache \
    clang lld llvm pkg-config mingw-w64 yasm nasm perl autoconf \
    gperf \
    libtool \
    automake \
    ca-certificates \
    file \
    pkg-config \
    automake \
    autoconf \
    libtool \
    gperf \
    bison \
    flex \
    nasm \
    yasm \
    libglib2.0-dev \
    libssl-dev \
    libasound2-dev \
    libx11-dev \
    autoconf \
    automake \
    autopoint \
    bash \
    bison \
    bzip2 \
    flex \
    g++ \
    g++-multilib \
    gettext \
    git \
    gperf \
    intltool \
    libc6-dev-i386 \
    libgdk-pixbuf2.0-dev \
    libltdl-dev \
    libncurses5-dev \
    libssl-dev \
    libtool-bin \
    libxml-parser-perl \
    lzip \
    make \
    ninja-build \
    openssl \
    p7zip-full \
    patch \
    perl \
    ruby \
    sed \
    unzip \
    wget \
    xz-utils \
    sudo \
    libpulse-dev && \
    sudo pip3 install meson && \
    apt-get clean && \
    which python3 && \
    sudo ln -s /usr/bin/python3 /usr/bin/python && \
    rm -rf /var/lib/apt/lists/*


# 2. MXE 非公式リポジトリをクローン
WORKDIR /opt
RUN git clone --depth=1 https://github.com/aarch64devel/mxe-STATIC ${MXE_PATH} && \
    cd armmxe && \
    mkdir usr
#    mkdir usr && \
#    git clone https://github.com/mxe/mxe.git && \
#    git clone --depth=1 https://github.com/mxe/mxe.git ${MXE_PATH} && \
#    git clone --depth=1 https://github.com/aarch64devel/mxe-STATIC /opt/tmp && \
#    cp -r /opt/tmp /opt/armmxe

# 3. LLVM MinGW を取得・展開（armv7専用）
WORKDIR ${MXE_PATH}/usr
RUN wget https://github.com/armdevvel/llvm-mingw/releases/download/14.0/armv7-only-llvm-mingw-linux-x86_64.tar.xz && \
    tar -xf armv7-only-llvm-mingw-linux-x86_64.tar.xz && \
    rm armv7-only-llvm-mingw-linux-x86_64.tar.xz

# 4. PATH を設定
ENV PATH="${MXE_PATH}/usr/bin:$PATH"

# 5. ライブラリおよびQt/FFmpegのビルド
WORKDIR ${MXE_PATH}
RUN make \
    zlib \
    openssl \
    -j$(nproc)

# --------------------
# Qt ソース取得
# --------------------
WORKDIR /build
# RUN curl -LO https://download.qt.io/official_releases/qt/${QT_VERSION%.*}/${QT_VERSION}/single/qt-everywhere-src-${QT_VERSION}.tar.xz && \
#    tar -xf qt-everywhere-src-${QT_VERSION}.tar.xz && \
RUN curl -LO https://download.qt.io/official_releases/qt/${QT_VERSION%.*}/${QT_VERSION}/submodules/${QT_MODULE}-everywhere-src-${QT_VERSION}.tar.xz && \
    tar -xf ${QT_MODULE}-everywhere-src-${QT_VERSION}.tar.xz && \
    mkdir -p qt6 && \
    cp -r ${QT_MODULE}-everywhere-src-${QT_VERSION} qt6 && \
    cd qt6 && \
    mv ${QT_MODULE}-everywhere-src-${QT_VERSION} ${QT_MODULE} 

ENV OPENSSL_ARM_PREFIX=${MXE_PATH}/usr/armv7-w64-mingw32
ENV PATH="/opt/qt6-host/bin:/opt/llvm-mingw/bin:$PATH"
ENV OPENSSL_ARM_PREFIX=${MXE_PATH}/usr/armv7-w64-mingw32
ENV PKG_CONFIG_PATH="${OPENSSL_ARM_PREFIX}/lib/pkgconfig"
# --------------------
# Windows ARM 用 Qt のビルド
# --------------------
WORKDIR ${QT6_SRC_DIR}/qtbase

# クロスコンパイラ確認
RUN clang --target=aarch64-w64-mingw32 --version
RUN echo '.globl _start\n_start:\n nop' > test.s \
 && clang --target=aarch64-w64-mingw32 -c test.s -o test.o \
 && file test.o

# Qt configure 実行
RUN ./configure \
    -prefix ${QT6_ARM_PREFIX} \
    -cmake-generator "Ninja" \
    -release \
    -static \
    -opensource -confirm-license \
    -xplatform win32-clang-g++ \
    -device-option CMAKE_SYSTEM_NAME=Windows \
    -device-option CMAKE_SYSTEM_PROCESSOR=aarch64 \
    -device-option CMAKE_C_COMPILER=/opt/llvm-mingw/bin/clang \
    -device-option CMAKE_CXX_COMPILER=/opt/llvm-mingw/bin/clang++ \
    -device-option CMAKE_ASM_COMPILER=/opt/llvm-mingw/bin/clang \
    -device-option CMAKE_C_FLAGS="--target=aarch64-w64-mingw32" \
    -device-option CMAKE_CXX_FLAGS="--target=aarch64-w64-mingw32" \
    -device-option CMAKE_ASM_FLAGS="--target=aarch64-w64-mingw32" \
    -device-option CMAKE_FIND_ROOT_PATH=/opt/llvm-mingw/aarch64-w64-mingw32 \
    -openssl-linked \
    -I${OPENSSL_ARM_PREFIX}/include \
    -L${OPENSSL_ARM_PREFIX}/lib \
    -nomake tests -nomake examples \
    -no-feature-shared \
    -no-dbus \
    -no-feature-accessibility \
    -no-feature-draganddrop \
    -no-feature-fscompleter \
    -no-feature-concurrent \
    -no-feature-animation \
    || { \
        echo "----- CMakeError.log -----"; cat CMakeFiles/CMakeError.log || true; \
        echo "----- CMakeOutput.log -----"; cat CMakeFiles/CMakeOutput.log || true; \
        echo "----- CMakeCache.txt -----"; cat CMakeCache.txt || true; \
        exit 1; \
    } && \
    cmake --build . --parallel && \
    cmake --install . --prefix ${QT6_ARM_PREFIX}

# 6. 確認（任意）
RUN armv7-w64-mingw32-clang --version && \
    file ${MXE_PATH}/usr/armv7-w64-mingw32/bin/ffmpeg.exe || true && \
    file ${MXE_PATH}/usr/armv7-w64-mingw32/bin/Qt*.dll || true

CMD ["/bin/bash"]
