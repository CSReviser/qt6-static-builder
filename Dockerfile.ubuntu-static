# Dockerfile.ubuntu-static
FROM ubuntu:22.04

# 環境変数
ARG DEBIAN_FRONTEND=noninteractive
ARG QT_VERSION=6.9.0
ARG QT_VERSION1=6.9
ARG QT_MODULE=qtbase
ENV QT_VERSION=${QT_VERSION}
ENV QT_MODULE=${QT_MODULE}
ENV INSTALL_PREFIX=/opt/qt6-static
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/local/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig

# 依存インストール
# Install dependencies
RUN apt-get update --fix-missing && apt-get install -y \
    build-essential \
    cmake \
    ninja-build \
    git \
    curl \
    wget \
    gperf \
    libtool \
    automake \
    ca-certificates \
    libdbus-1-dev \
    libgl1-mesa-dev \
    libglu1-mesa-dev \
    libglib2.0-dev \
    libgtk-3-dev \
    libfontconfig1-dev \
    meson \
    bison \
    lld \
    binutils \
    python3-pip \
    pkg-config \
    libxcb1-dev libxcb-util-dev libx11-dev \
    libxext-dev libxrender-dev libxkbcommon-dev \
    libx11-xcb-dev \
    libxcb-cursor-dev \
    libxcb-glx0-dev \
    libxcb-icccm4-dev \
    libxcb-image0-dev \
    libxcb-keysyms1-dev \
    libxcb-randr0-dev \
    libxcb-render-util0-dev \
    libxcb-shape0-dev \
    libxcb-shm0-dev \
    libxcb-sync-dev \
    libxcb-util-dev \
    libxcb-xfixes0-dev \
    libxcb-xkb-dev \
    libxcb1-dev \
    libxext-dev \
    libxfixes-dev \
    libxi-dev \
    libxkbcommon-dev \
    libxkbcommon-x11-dev \
    libxrender-dev \
    libssl-dev \
    libxcb-dri2-0-dev \
    && rm -rf /var/lib/apt/lists/*

ENV CFLAGS="-fPIC"
ENV CXXFLAGS="-fPIC"
# zlib (静的ビルド強制)
RUN wget https://zlib.net/zlib-1.3.1.tar.gz && \
    tar -xzf zlib-1.3.1.tar.gz && \
    cd zlib-1.3.1 && \
    ./configure --static --prefix=/usr/local && make -j$(nproc) && make install

# libxml2 (v2.9.9, static build using configure)
RUN wget https://github.com/GNOME/libxml2/archive/refs/tags/v2.9.9.tar.gz && \
    tar -xf v2.9.9.tar.gz && cd libxml2-2.9.9 && \
    ./autogen.sh && \
    env \
      CFLAGS="-fPIC" \
      ./configure \
        --prefix=/usr/local \
        --enable-static \
        --disable-shared \
        --without-python \
        --with-zlib=/usr/local && \
    make -j$(nproc) && \
    make install

# libpng
RUN wget https://download.sourceforge.net/libpng/libpng-1.6.37.tar.gz && \
    tar -xzf libpng-1.6.37.tar.gz && \
    cd libpng-1.6.37 && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && make -j$(nproc) && make install

# libjpeg-turbo (static)
RUN wget https://downloads.sourceforge.net/libjpeg-turbo/libjpeg-turbo-3.0.1.tar.gz && \
    tar -xzf libjpeg-turbo-3.0.1.tar.gz && cd libjpeg-turbo-3.0.1 && \
    cmake -B build -G"Unix Makefiles" \
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DENABLE_SHARED=OFF \
        -DENABLE_STATIC=ON && \
    cmake --build build -j$(nproc) && \
    cmake --install build

# libXext
RUN wget https://xorg.freedesktop.org/archive/individual/lib/libXext-1.3.5.tar.gz && \
    tar -xzf libXext-1.3.5.tar.gz && \
    cd libXext-1.3.5 && \
    PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig \
    ./configure --prefix=/usr/local --disable-shared --enable-static && \
    make -j$(nproc) && make install

# FreeType (static)
RUN wget https://repo.jing.rocks/nongnu/freetype/freetype-2.9.1.tar.gz && \
    tar -xf freetype-2.9.1.tar.gz && cd freetype-2.9.1 && \
    ./configure \
      --prefix=/usr/local \
      --with-harfbuzz=yes \
      --enable-static \
      --disable-shared \
      --with-pic \
      --with-bdfformat \
      --without-bzip2 \
      HARFBUZZ_CFLAGS="$(pkg-config --cflags harfbuzz)" \
      HARFBUZZ_LIBS="$(pkg-config --libs harfbuzz)"

# harfbuzz (static, .pc生成確認)
RUN wget https://github.com/harfbuzz/harfbuzz/releases/download/8.3.0/harfbuzz-8.3.0.tar.xz && \
    tar -xf harfbuzz-8.3.0.tar.xz && cd harfbuzz-8.3.0 && \
    meson setup build \
      --prefix=/usr/local \
      --buildtype=release \
      --libdir=lib \
      -Ddefault_library=static \
      -Dtests=disabled \
      -Ddocs=disabled \
      -Dbenchmark=disabled \
      -Dintrospection=disabled && \
    ninja -C build && \
    ninja -C build install

# ICU (static)
RUN wget https://github.com/unicode-org/icu/releases/download/release-74-2/icu4c-74_2-src.tgz && \
    tar -xzf icu4c-74_2-src.tgz && \
    cd icu/source && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && \
    make -j$(nproc) && \
    make install

# xorgproto (プロトコル定義)
RUN wget https://xorg.freedesktop.org/archive/individual/proto/xorgproto-2024.1.tar.gz && \
    tar -xf xorgproto-2024.1.tar.gz && \
    cd xorgproto-2024.1 && \
    ./configure --prefix=/usr && make -j$(nproc) && make install

# xcb-proto (プロトコル定義)
RUN wget https://xorg.freedesktop.org/archive/individual/proto/xcb-proto-1.17.0.tar.xz && \
    tar -xf xcb-proto-1.17.0.tar.xz && \
    cd xcb-proto-1.17.0 && \
    ./configure --prefix=/usr/local && make -j$(nproc) && make install

# libxml-2.0
RUN wget https://github.com/GNOME/libxml2/archive/refs/tags/v2.14.2.tar.gz && \
    tar -xf v2.14.2.tar.gz && \
    cd libxml2-2.14.2 && \
    cmake -B build -GNinja \
    -D BUILD_SHARED_LIBS=OFF \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D LIBXML2_WITH_ICONV=OFF \
    -D LIBXML2_WITH_PYTHON=OFF \
    -D LIBXML2_WITH_ZLIB=ON && \
    cmake --build build -j$(nproc) && cmake --install build

# libXau
RUN wget https://xorg.freedesktop.org/archive/individual/lib/libXau-1.0.12.tar.gz && \
    tar -xf libXau-1.0.12.tar.gz && \
    cd libXau-1.0.12 && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && make -j$(nproc) && make install

# libXdmcp
RUN wget https://xorg.freedesktop.org/archive/individual/lib/libXdmcp-1.1.5.tar.gz && \
    tar -xf libXdmcp-1.1.5.tar.gz && \
    cd libXdmcp-1.1.5 && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && make -j$(nproc) && make install

# libpthread-stubs
RUN wget https://xorg.freedesktop.org/archive/individual/lib/libpthread-stubs-0.1.tar.gz && \
    tar -xzf libpthread-stubs-0.1.tar.gz && \
    cd libpthread-stubs-0.1 && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && \
    make -j$(nproc) && make install

# xtrans
RUN wget https://xorg.freedesktop.org/archive/individual/lib/xtrans-1.2.7.tar.gz && \
    tar -xzf xtrans-1.2.7.tar.gz && \
    cd xtrans-1.2.7 && \
    ./configure --prefix=/usr/local && make -j$(nproc) && make install

# libICE
RUN wget https://xorg.freedesktop.org/archive/individual/lib/libICE-1.1.2.tar.gz && \
    tar -xzf libICE-1.1.2.tar.gz && \
    cd libICE-1.1.2 && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && make -j$(nproc) && make install

# libSM
RUN wget https://xorg.freedesktop.org/archive/individual/lib/libSM-1.2.2.tar.gz && \
    tar -xzf libSM-1.2.2.tar.gz && \
    cd libSM-1.2.2 && \
    ./configure --prefix=/usr/local--disable-shared --enable-static && make -j$(nproc) && make install

# libXfixes
RUN wget https://xorg.freedesktop.org/archive/individual/lib/libXfixes-6.0.1.tar.gz && \
    tar -xzf libXfixes-6.0.1.tar.gz && \
    cd libXfixes-6.0.1 && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && make -j$(nproc) && make install

# libXi
RUN wget https://xorg.freedesktop.org/archive/individual/lib/libXi-1.6.2.tar.gz && \
    tar -xzf libXi-1.6.2.tar.gz && \
    cd libXi-1.6.2 && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && make -j$(nproc) && make install

# libXinerama
RUN wget https://xorg.freedesktop.org/archive/individual/lib/libXinerama-1.1.5.tar.gz && \
    tar -xzf libXinerama-1.1.5.tar.gz && \
    cd libXinerama-1.1.5 && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && make -j$(nproc) && make install

# libXext
RUN wget https://xorg.freedesktop.org/archive/individual/lib/libXext-1.3.3.tar.gz && \
    tar -xzf libXext-1.3.3.tar.gz && \
    cd libXext-1.3.3 && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && make -j$(nproc) && make install

# libXrender
RUN wget https://xorg.freedesktop.org/archive/individual/lib/libXrender-0.9.12.tar.gz && \
    tar -xzf libXrender-0.9.12.tar.gz && \
    cd libXrender-0.9.12 && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && \
    make -j$(nproc) && make install

# libxcb
RUN wget https://xorg.freedesktop.org/archive/individual/lib/libxcb-1.17.0.tar.gz && \
    tar -xzf libxcb-1.17.0.tar.gz && \
    cd libxcb-1.17.0 && \
    ./configure --prefix=/usr/local --disable-shared --enable-static --enable-xevie --enable-xprint && make -j$(nproc) && make install

# libX11
RUN wget https://xorg.freedesktop.org/archive/individual/lib/libX11-1.6.9.tar.gz && \
    tar -xzf libX11-1.6.9.tar.gz && \
    cd libX11-1.6.9 && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && make -j$(nproc) && make install

# libXrandr
RUN wget https://xorg.freedesktop.org/archive/individual/lib/libXrandr-1.5.2.tar.gz && \
    tar -xzf libXrandr-1.5.2.tar.gz && \
    cd libXrandr-1.5.2 && \
    PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig \
    ./configure --prefix=/usr/local --disable-shared --enable-static --with-pic && \
    make -j$(nproc) && make install

# xcb-util family
ARG XCB_UTIL_VERSION=0.4.1
ARG XCB_UTIL_IMAGE_VERSION=0.4.1
ARG XCB_UTIL_KEYSYMS_VERSION=0.4.1
ARG XCB_UTIL_RENDERUTIL_VERSION=0.3.10
ARG XCB_UTIL_WM_VERSION=0.4.2
ARG XCB_UTIL_CURSOR_VERSION=0.1.5

# Download and build xcb-util
RUN wget https://xorg.freedesktop.org/archive/individual/lib/xcb-util-${XCB_UTIL_VERSION}.tar.gz && \
    tar -xzf xcb-util-${XCB_UTIL_VERSION}.tar.gz && \
    cd xcb-util-${XCB_UTIL_VERSION} && \
    ./configure --prefix=/usr/local --with-xcb=/usr --disable-shared --enable-static && \
    make -j$(nproc) && make install

# xcb-util-image
RUN wget https://xorg.freedesktop.org/archive/individual/lib/xcb-util-image-${XCB_UTIL_IMAGE_VERSION}.tar.gz && \
    tar -xzf xcb-util-image-${XCB_UTIL_IMAGE_VERSION}.tar.gz && \
    cd xcb-util-image-${XCB_UTIL_IMAGE_VERSION} && \
    ./configure --prefix=/usr/local --with-xcb=/usr --disable-shared --enable-static && \
    make -j$(nproc) && make install

# xcb-util-keysyms
RUN wget https://xorg.freedesktop.org/archive/individual/lib/xcb-util-keysyms-${XCB_UTIL_KEYSYMS_VERSION}.tar.gz && \
    tar -xzf xcb-util-keysyms-${XCB_UTIL_KEYSYMS_VERSION}.tar.gz && \
    cd xcb-util-keysyms-${XCB_UTIL_KEYSYMS_VERSION} && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && \
    make -j$(nproc) && make install

# xcb-util-renderutil
RUN wget https://xorg.freedesktop.org/archive/individual/lib/xcb-util-renderutil-${XCB_UTIL_RENDERUTIL_VERSION}.tar.gz && \
    tar -xzf xcb-util-renderutil-${XCB_UTIL_RENDERUTIL_VERSION}.tar.gz && \
    cd xcb-util-renderutil-${XCB_UTIL_RENDERUTIL_VERSION} && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && \
    make -j$(nproc) && make install

# xcb-util-wm
RUN wget https://xorg.freedesktop.org/archive/individual/lib/xcb-util-wm-${XCB_UTIL_WM_VERSION}.tar.gz && \
    tar -xzf xcb-util-wm-${XCB_UTIL_WM_VERSION}.tar.gz && \
    cd xcb-util-wm-${XCB_UTIL_WM_VERSION} && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && \
    make -j$(nproc) && make install

# xcb-util-cursor
RUN wget https://xorg.freedesktop.org/archive/individual/lib/xcb-util-cursor-${XCB_UTIL_CURSOR_VERSION}.tar.gz && \
    tar -xzf xcb-util-cursor-${XCB_UTIL_CURSOR_VERSION}.tar.gz && \
    cd xcb-util-cursor-${XCB_UTIL_CURSOR_VERSION} && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && \
    make -j$(nproc) && make install

# Build libxkbcommon
ARG LIBXKBCOMMON_VERSION=1.9.0

# Step 1: Create Meson native file with static C++ link flags
RUN echo "[binaries]" > /tmp/native.txt && \
    echo "c = 'gcc'" >> /tmp/native.txt && \
    echo "cpp = 'g++'" >> /tmp/native.txt && \
    echo "pkgconfig = '/usr/bin/pkg-config'" >> /tmp/native.txt && \
    echo "[properties]" >> /tmp/native.txt && \
    echo "c_args = ['-static', '-static-libgcc']" >> /tmp/native.txt && \
    echo "cpp_args = ['-static', '-static-libstdc++', '-static-libgcc']" >> /tmp/native.txt && \
    echo "c_link_args = ['-static', '-lstdc++', '-lm', '-lpthread', '-ldl', '-static-libgcc', '-L/usr/local/lib', '-L/usr/lib', '-lXau', '-lXdmcp']" >> /tmp/native.txt && \
    echo "cpp_link_args = ['-static', '-lstdc++', '-lm', '-lpthread', '-ldl', '-static-libstdc++', '-static-libgcc', '-L/usr/local/lib', '-L/usr/lib', '-lXau', '-lXdmcp']" >> /tmp/native.txt

# Step 2: Download and build with Meson
RUN wget https://github.com/xkbcommon/libxkbcommon/archive/refs/tags/xkbcommon-${LIBXKBCOMMON_VERSION}.tar.gz && \
    tar -xf xkbcommon-${LIBXKBCOMMON_VERSION}.tar.gz && \
    cd libxkbcommon-xkbcommon-${LIBXKBCOMMON_VERSION} && \
    meson setup builddir \
        --prefix=/usr/local \
        --libdir=lib \
        --buildtype=release \
        --native-file=/tmp/native.txt \
        -Ddefault_library=static \
        -Denable-wayland=false \
        -Denable-x11=true \
        -Db_lundef=false \
        -Denable-xkbregistry=true || true && \
    echo "----- meson-log.txt -----" && cat /libxkbcommon-xkbcommon-1.9.0/builddir/meson-logs/meson-log.txt || true && \
    ninja -C builddir && \
    ninja -C builddir install && \
    cd .. && rm -rf libxkbcommon-${LIBXKBCOMMON_VERSION} xkbcommon-${LIBXKBCOMMON_VERSION}.tar.gz /tmp/native.txt

# 必須ライブラリ一覧
RUN set -ex && \
    for pc in x11 xext xrender xcb xcb-util xcb-image xcb-shm xcb-icccm \
              xcb-sync xcb-xfixes xcb-shape xcb-keysyms xkbcommon xkbcommon-x11 ssl; do \
        echo "Checking $pc via pkg-config..." && \
        PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/local/lib/x86_64-linux-gnu/pkgconfig:usr/lib/x86_64-linux-gnu/pkgconfig" \
        pkg-config --static --exists $pc || (echo "Missing static pkg-config: $pc"); \
    done && \
    echo "All required .pc files found."

# 省略: 各種 xcb-util 系ライブラリのビルド後に入れる確認用ステップ
RUN echo "---- Installed .pc files ----" && \
    ls -1 /usr/local/lib/pkgconfig/*.pc && \
    echo "---- xcb-icccm.pc content ----" && \
    cat /usr/local/lib/pkgconfig/*.pc || echo "xcb-icccm.pc not found" && \
    cat /usr/local/lib/x86_64-linux-gnu/pkgconfig/*.pc || echo "xcb-icccm.pc not found" && \
    cat /usr/local/share/pkgconfig/*.pc || echo "xcb-icccm.pc not found"

# 静的ライブラリファイルの存在確認
RUN set -ex && \
    for lib in X11 Xext Xrender xcb xcb-util xcb-image xcb-shm xcb-icccm \
               xcb-sync xcb-xfixes xcb-shape xcb-keysyms xkbcommon xkbcommon-x11 ssl; do \
        echo "Checking lib$lib.a..." && \
        find /usr/local/lib /usr/lib -name "lib$lib.a" | grep . || \
        (echo "Missing static library: lib$lib.a"); \
    done && \
    echo "All required static libraries found."

RUN nm /usr/local/lib/libXau.a | grep XauGetBestAuthByAddr && \
     nm /usr/local/lib/libxcb.a | grep XauGetBestAuthByAddr && \
     nm /usr/local/lib/libxcb.a | grep XdmcpWrap && \
     nm /usr/local/lib/libxcb.a | grep XauDisposeAuth

# Qt取得 & ビルド
# Download and extract Qt module source
WORKDIR /build
RUN curl -LO https://download.qt.io/official_releases/qt/${QT_VERSION%.*}/${QT_VERSION}/submodules/${QT_MODULE}-everywhere-src-${QT_VERSION}.tar.xz && \
    tar -xf ${QT_MODULE}-everywhere-src-${QT_VERSION}.tar.xz

# Configure, build, and install Qt statically
RUN mkdir qt-build && cd qt-build && \
    cmake -GNinja ../${QT_MODULE}-everywhere-src-${QT_VERSION} \
      -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \
      -DCMAKE_BUILD_TYPE=Release \
      -DBUILD_SHARED_LIBS=OFF \
      -DQT_BUILD_EXAMPLES=OFF \
      -DQT_BUILD_TESTS=OFF \
      -DQT_FEATURE_static=ON \
      -DQT_FEATURE_gui=ON \
      -DQT_FEATURE_widgets=ON \
      -DQT_FEATURE_dbus=ON \
      -DQT_FEATURE_icu=ON \
      -DQT_FEATURE_opengl_desktop=OFF \
      -DQT_FEATURE_openssl=ON \
      -DQT_FEATURE_openssl_linked=ON \
      -DQT_FEATURE_png=ON \
      -DQT_FEATURE_jpeg=ON \
      -DQT_FEATURE_freetype=ON \
      -DQT_FEATURE_harfbuzz=ON \
      -DQT_FEATURE_xlib=ON \
      -DQT_FEATURE_xcb=ON \
      -DQT_FEATURE_xkbcommon=ON \
      -DQT_FEATURE_fontconfig=ON \
      -DQT_FEATURE_sessionmanager=ON \
      -DQT_FEATURE_glib=OFF \
      -DQT_FEATURE_xrender=ON \
      -DQT_FEATURE_system_zlib=ON \
      -DQT_FEATURE_system_png=ON \
      -DQT_FEATURE_system_jpeg=ON \
      -DQT_FEATURE_system_freetype=ON \
      -DQT_FEATURE_system_harfbuzz=ON || true && \
    echo "----- config.summary -----" && cat config.summary || true && \
    echo "----- CMakeError.log -----" && cat CMakeFiles/CMakeError.log || true && \
    echo "----- CMakeOutput.log -----" && cat CMakeFiles/CMakeOutput.log || true && \
    cmake --build . --parallel && \
    cmake --install .

# PATH登録
ENV PATH="/opt/qt6-static/bin:$PATH"
