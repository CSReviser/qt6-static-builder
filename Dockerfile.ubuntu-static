# Dockerfile.ubuntu-static

FROM ubuntu:22.04

# build-args
ARG QT_VERSION=6.9.0
ARG QT_MODULE=qtbase
ARG INSTALL_PREFIX=/opt/qt6-static
ARG ENABLE_FEATURE=false
ARG QT6_HOST_PREFIX=/opt/qt6-static
# 環境変数
ARG DEBIAN_FRONTEND=noninteractive
ENV QT_VERSION=${QT_VERSION}
ENV QT_MODULE=${QT_MODULE}
ENV INSTALL_PREFIX=${INSTALL_PREFIX}
ENV DEBIAN_FRONTEND=noninteractive
ENV CMAKE_PREFIX_PATH="/usr/local"
ENV CPPFLAGS="-I/usr/local/include"
ENV LDFLAGS="-static -lstdc++ -lm -lpthread -ldl -static-libgcc -L/usr/local/lib -L/usr/lib -lXau -lXdmcp"
ENV CMAKE_EXE_LINKER_FLAGS="-static -static-libstdc++ -static-libgcc"
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/local/lib/x86_64-linux-gnu/pkgconfig
ENV CFLAGS="-fPIC"
ENV CXXFLAGS="-fPIC"

# 必要なパッケージインストール
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libxi-dev \
    xutils-dev \
    x11proto-dev \
    autoconf \
    automake \
    libtool \
    cmake \
    ninja-build \
    git \
    curl \
    wget \
    meson \
    bison \
    byacc \
    gperf \
    g++ gcc \
    lld \
    ca-certificates \
    ca-certificates \
    libfontconfig1-dev \
    libfreetype-dev \
    libgtk-3-dev \
    libx11-dev \
    libx11-xcb-dev \
    libxcb-cursor-dev \
    libxcb-glx0-dev \
    libxcb-icccm4-dev \
    libxcb-image0-dev \
    libxcb-keysyms1-dev \
    libxcb-randr0-dev \
    libxcb-render-util0-dev \
    libxcb-shape0-dev \
    libxcb-shm0-dev \
    libxcb-sync-dev \
    libxcb-util-dev \
    libxcb-xfixes0-dev \
    libxcb-xkb-dev \
    libxcb1-dev \
    libxext-dev \
    libxfixes-dev \
    libxi-dev \
    libxkbcommon-dev \
    libxkbcommon-x11-dev \
    libxrender-dev \
    libjpeg-dev \
    libpng-dev \
    zlib1g-dev \
    libdbus-1-dev \
    libgl1-mesa-dev \
    libglu1-mesa-dev \
    libpthread-stubs0-dev \
    x11proto-core-dev \
    xcb-proto \
    libxcb-util0-dev \
    libxcb-xinerama0-dev \
    meson \
    libssl-dev \
    python3-pip \
    pkg-config && \
    pip3 install mako \
    && rm -rf /var/lib/apt/lists/*

# --------------------
# Qt ソース取得
# --------------------
WORKDIR /build
# RUN curl -LO https://download.qt.io/official_releases/qt/${QT_VERSION%.*}/${QT_VERSION}/single/qt-everywhere-src-${QT_VERSION}.tar.xz && \
#    tar -xf qt-everywhere-src-${QT_VERSION}.tar.xz && \
RUN curl -LO https://download.qt.io/official_releases/qt/${QT_VERSION%.*}/${QT_VERSION}/submodules/${QT_MODULE}-everywhere-src-${QT_VERSION}.tar.xz && \
    tar -xf ${QT_MODULE}-everywhere-src-${QT_VERSION}.tar.xz && \
    mkdir -p qt6 && \
    cp -r ${QT_MODULE}-everywhere-src-${QT_VERSION} qt6 && \
    cd qt6 && \
    mv ${QT_MODULE}-everywhere-src-${QT_VERSION} ${QT_MODULE} && \
    cd /build && tar -cf qt6-src.tar qt6

# --------------------
# ホスト向け Qt ツールのビルド
# --------------------
# ホスト用 OpenSSL ビルド (x86_64向け)
ENV OPENSSL_HOST_PREFIX=/opt/openssl-host
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/local/lib/x86_64-linux-gnu/pkgconfig
WORKDIR ${QT6_SRC_DIR}/qtbase
RUN ./configure \
    -prefix ${QT6_HOST_PREFIX} \
    -release \
    -static \
    -opensource -confirm-license \
    -nomake tests -nomake examples \
    -no-gdb-index \
    -openssl-linked \
    -I${OPENSSL_HOST_PREFIX}/include \
    -L${OPENSSL_HOST_PREFIX}/lib　|| \
    { echo "----- CMakeError.log -----"; cat CMakeFiles/CMakeError.log || true; \
      echo "----- CMakeOutput.log -----"; cat CMakeFiles/CMakeOutput.log || true;  exit 1; } && \
    cmake --build . --parallel && \
    cmake --install .


#RUN mkdir qt-build && cd qt-build && \
#    ../${QT_MODULE}-everywhere-src-${QT_VERSION}/configure \
#      -prefix "${INSTALL_PREFIX}" \
#      QMAKE_LFLAGS="$LDFLAGS" \
#      -static -release \
#      -opensource -confirm-license \
#      -nomake tests \
#      -nomake examples \
#      -feature-dbus \
#      -feature-png \
#      -feature-jpeg \
#      -feature-freetype \
#      -feature-harfbuzz \
#      -feature-gui \
#      -feature-widgets \
#      -feature-xlib \
#      -feature-xcb \
#      -feature-xcb-xlib \
#      -feature-xkbcommon \
#      -feature-xkbcommon-x11 \
#      -no-feature-fontconfig \
#      -feature-sessionmanager \
#      -feature-openssl \
#      -no-feature-openssl-linked \
#      -no-feature-glib \
#      -feature-icu \
#      -feature-system-zlib \
#      -feature-system-png \
#      -feature-system-jpeg \
#      -feature-system-freetype \
#      -feature-system-harfbuzz && \
#      make -j$(nproc) && \
#      make install

# Configure, build, and install Qt statically
#RUN mkdir qt-build && cd qt-build && \
#    cmake -GNinja ../${QT_MODULE}-everywhere-src-${QT_VERSION} \
#      -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \
#      -DCMAKE_BUILD_TYPE=Release \
#      -DCMAKE_PREFIX_PATH="/usr/local" \
#      -DCMAKE_EXE_LINKER_FLAGS="-Wl,--start-group -lxcb-icccm -lxcb -lXau -lXdmcp -Wl,--end-group" \
#      -DBUILD_SHARED_LIBS=OFF \
#      -DQT_BUILD_EXAMPLES=OFF \
#      -DQT_BUILD_TESTS=OFF \
#      -DFEATURE_dbus=ON \
#      -DFEATURE_icu=OFF \
#      -DQT_FEATURE_opengl_desktop=OFF \
#      -DQT_FEATURE_static=ON \
#      -DQT_FEATURE_openssl=ON \
#      -DQT_FEATURE_openssl_linked=ON \
#      -DQT_FEATURE_gui=ON \
#      -DQT_FEATURE_widgets=ON \
#      -DQT_FEATURE_xlib=ON \
#      -DQT_FEATURE_xcb=ON \
#      -DQT_FEATURE_xkbcommon=ON \
#      -DQT_FEATURE_fontconfig=ON \
#      -DQT_FEATURE_sessionmanager=ON \
#      -DQT_FEATURE_glib=OFF \
#      -DQT_FEATURE_xrender=ON \
#      -DFEATURE_png=ON \
#      -DFEATURE_jpeg=ON \
#      -DFEATURE_freetype=ON \
#      -DFEATURE_harfbuzz=ON \
#      -DFEATURE_system_zlib=OFF \
#      -DFEATURE_system_png=OFF \
#      -DFEATURE_system_jpeg=OFF \
#      -DFEATURE_system_freetype=OFF \
#      -DFEATURE_system_harfbuzz=OFF && \
#    cmake --build . --parallel && \
#    cmake --install .

RUN pkg-config --static --libs xcb-icccm && \
    pkg-config --static --libs xcb-util && \
    pkg-config --static --libs xcb

RUN grep libxcb-image ${QT_MODULE}-everywhere-src-${QT_VERSION}/CMakeCache.txt || echo "No direct reference to libxcb-image" && \
#    grep -i icccm ${QT_MODULE}-everywhere-src-${QT_VERSION}/CMakeCache.txt && \
#    grep -i icccm ${QT_MODULE}-everywhere-src-${QT_VERSION}/CMakeFiles/CMakeOutput.log

RUN echo "==== XCB pkg-config ====" && \
    PKG_CONFIG_PATH=/usr/local/lib/pkgconfig pkg-config --static --libs xcb && \
    echo "==== libQt6XcbQpa.a symbols ====" && \
    nm -g /opt/qt6-static/lib/libQt6XcbQpa.a | grep Xau || true && \
    nm -u /opt/qt6-static/lib/libQt6XcbQpa.a | grep xcb_icccm || true && \
    echo "==== libxcb.a symbols ====" && \
    nm -g /usr/local/lib/libxcb.a | grep Xau || true

RUN find /opt/qt6-static/lib -name "*.a" -exec echo "Checking {}" \; -exec nm {} \; | grep xcb_icccm_size_hints_set_win_gravity || echo "OK: xcb_icccm_size_hints_set_win_gravity not found"
RUN find /opt/qt6-static/lib -name "*.a" -exec echo "Checking {}" \; -exec nm {} \; | grep xcb_icccm_size_hints_set_min_size || echo "OK: xcb_icccm_size_hints_set_min_size not found"
RUN find /opt/qt6-static/lib -name "*.a" -exec echo "Checking {}" \; -exec nm {} \; | grep xcb_icccm_size_hints_set_max_size || echo "OK: xcb_icccm_size_hints_set_max_size not found"
RUN find /opt/qt6-static/lib -name "*.a" -exec echo "Checking {}" \; -exec nm {} \; | grep xcb_icccm_ || echo "OK: xcb_icccm_ not found"

# ライブラリ一覧を出力（何が生成されたか確認）
RUN echo "Installed static libs:" && ls -l /usr/local/qt6-static/lib/*.a || echo "No static libs found"
# 全 .a ファイルを対象にシンボル調査
RUN find /opt/qt6-static/lib -name "*.a" -exec echo "== {} ==" \; -exec nm {} \; | grep xcb_icccm_ || echo "OK: xcb_icccm_ not found"
RUN nm /opt/qt6-static/lib/*.a | grep xcb_icccm_ || echo "OK: xcb_icccm_ not found"

# PATH登録
ENV PATH="/opt/qt6-static/bin:$PATH"
