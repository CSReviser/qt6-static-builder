FROM ubuntu:22.04 AS builder

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Tokyo
ENV INSTALL_PREFIX=/opt/qt6-static
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/local/lib/x86_64-linux-gnu/pkgconfig
ENV CFLAGS="-fPIC"
ENV CXXFLAGS="-fPIC"


RUN apt-get update && apt-get install -y \
    build-essential \
    pkg-config \
    wget \
    curl \
    ca-certificates \
    cmake \
    ninja-build \
    meson \
    python3 \
    python3-pip \
    gperf \
    git \
    automake \
    autoconf \
    libtool \
    bison \
    flex \
    xutils-dev \
    libpcre2-dev \
    libffi-dev \
    libssl-dev \
    x11proto-core-dev \
    x11proto-kb-dev \
    libxkbfile-dev \
    libxcb1-dev libxcb-util-dev libx11-dev \
    libxext-dev libxrender-dev libxkbcommon-dev \
    libx11-xcb-dev \
    libxcb-cursor-dev \
    libxcb-glx0-dev \
    libxcb-icccm4-dev \
    libxcb-image0-dev \
    libxcb-keysyms1-dev \
    libxcb-randr0-dev \
    libxcb-render-util0-dev \
    libxcb-shape0-dev \
    libxcb-shm0-dev \
    libxcb-sync-dev \
    libxcb-util-dev \
    libxcb-xfixes0-dev \
    libxcb-xkb-dev \
    libxcb1-dev \
    libxext-dev \
    libxfixes-dev \
    libxi-dev \
    libxkbcommon-dev \
    libxkbcommon-x11-dev \
    libxrender-dev \
    libdbus-1-dev \
    libgl1-mesa-dev \
    libglu1-mesa-dev \
    libglib2.0-dev \
    libgtk-3-dev \
    libssl-dev \
    libfontconfig1-dev \
    libclang-dev \
    libgl-dev \
    libpcre2-dev \
    libgl1-mesa-dev libglu1-mesa-dev mesa-common-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /work
#   ca-certificates \
#    libdbus-1-dev \
#    libgl1-mesa-dev \
#    libglu1-mesa-dev \
#    libglib2.0-dev \
#    libgtk-3-dev \
#    libxcb-dri2-0-dev \


# zlib (静的ビルド強制)
RUN wget https://zlib.net/zlib-1.3.1.tar.gz && \
    tar -xzf zlib-1.3.1.tar.gz && \
    cd zlib-1.3.1 && \
    ./configure --static --prefix=/usr/local && make -j$(nproc) && make install

# libxml2 (v2.9.9, static build using configure)
RUN wget https://github.com/GNOME/libxml2/archive/refs/tags/v2.9.9.tar.gz && \
    tar -xf v2.9.9.tar.gz && cd libxml2-2.9.9 && \
    ./autogen.sh && \
    env \
      CFLAGS="-fPIC" \
      ./configure \
        --prefix=/usr/local \
        --enable-static \
        --disable-shared \
        --without-python \
        --with-zlib=/usr/local && \
    make -j$(nproc) && \
    make install

# libpng
RUN wget https://download.sourceforge.net/libpng/libpng-1.6.37.tar.gz && \
    tar -xzf libpng-1.6.37.tar.gz && \
    cd libpng-1.6.37 && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && make -j$(nproc) && make install

# libjpeg-turbo (static)
RUN wget https://downloads.sourceforge.net/libjpeg-turbo/libjpeg-turbo-3.0.1.tar.gz && \
    tar -xzf libjpeg-turbo-3.0.1.tar.gz && cd libjpeg-turbo-3.0.1 && \
    cmake -B build -G"Unix Makefiles" \
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DENABLE_SHARED=OFF \
        -DENABLE_STATIC=ON && \
    cmake --build build -j$(nproc) && \
    cmake --install build

# libXext
RUN wget https://xorg.freedesktop.org/archive/individual/lib/libXext-1.3.5.tar.gz && \
    tar -xzf libXext-1.3.5.tar.gz && \
    cd libXext-1.3.5 && \
    PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig \
    ./configure --prefix=/usr/local --disable-shared --enable-static && \
    make -j$(nproc) && make install

# FreeType (static)
RUN wget https://repo.jing.rocks/nongnu/freetype/freetype-2.9.1.tar.gz && \
    tar -xf freetype-2.9.1.tar.gz && cd freetype-2.9.1 && \
    ./configure \
      --prefix=/usr/local \
      --with-harfbuzz=yes \
      --enable-static \
      --disable-shared \
      --with-pic \
      --with-bdfformat \
      --without-bzip2 \
      HARFBUZZ_CFLAGS="$(pkg-config --cflags harfbuzz)" \
      HARFBUZZ_LIBS="$(pkg-config --libs harfbuzz)"

# harfbuzz (static, .pc生成確認)
RUN wget https://github.com/harfbuzz/harfbuzz/releases/download/8.3.0/harfbuzz-8.3.0.tar.xz && \
    tar -xf harfbuzz-8.3.0.tar.xz && cd harfbuzz-8.3.0 && \
    meson setup build \
      --prefix=/usr/local \
      --buildtype=release \
      --libdir=lib \
      -Ddefault_library=static \
      -Dtests=disabled \
      -Ddocs=disabled \
      -Dbenchmark=disabled \
      -Dintrospection=disabled && \
    ninja -C build && \
    ninja -C build install

# ICU (static)
RUN wget https://github.com/unicode-org/icu/releases/download/release-74-2/icu4c-74_2-src.tgz && \
    tar -xzf icu4c-74_2-src.tgz && \
    cd icu/source && \
    ./configure --prefix=/usr/local --disable-shared --enable-static && \
    make -j$(nproc) && \
    make install



# Qtビルドに進む (このあと別途Qtソースを取得してstaticビルドする)
# Qt6
ARG QT_VERSION=6.9.0
ARG INSTALL_PREFIX=/opt/qt6-static

ENV DEBIAN_FRONTEND=noninteractive
ENV QT_VERSION=${QT_VERSION}
ENV INSTALL_PREFIX=${INSTALL_PREFIX}
ENV PKG_CONFIG_PATH="/usr/lib/pkgconfig:/usr/share/pkgconfig"
ENV CFLAGS="-I/usr/include"
ENV LDFLAGS="-L/usr/lib"

# Qt6 ソースダウンロードとビルド
RUN curl -LO https://download.qt.io/official_releases/qt/${QT_VERSION%.*}/${QT_VERSION}/single/qt-everywhere-src-${QT_VERSION}.tar.xz && \
    tar -xf qt-everywhere-src-${QT_VERSION}.tar.xz

RUN mkdir qt-build && cd qt-build && \
    ../qt-everywhere-src-${QT_VERSION}/configure \
      -prefix "${INSTALL_PREFIX}" \
      -static -release \
      -opensource -confirm-license \
      -skip qtdoc \
      -skip qtmqtt \
      -skip qt3d \
      -skip qtactiveqt \
      -skip qtconnectivity \
      -skip qtdatavis3d \
      -skip timageformats \
      -skip qtlanguageserver \
      -skip qtshadertools \
      -skip qtquick3dphysics \
      -skip qtimageformats \
      -skip qttranslations \
      -skip qtcharts \
      -skip qtlottie \
      -skip qtdeclarative \
      -skip qtgraphs \
      -skip qtmultimedia \
      -skip qtnetworkauth \
      -skip qtopcua \
      -skip qtpositioning \
      -skip qtquick3d \
      -skip qtremoteobjects \
      -skip qtscxml \
      -skip qtsensors \
      -skip qtserialbus \
      -skip qtserialport \
      -skip qtspeech \
      -skip qtsvg \
      -skip qttools \
      -skip qtwayland \
      -skip qtwebchannel \
      -skip qtwebengine \
      -skip qtwebsockets \
      -skip qtwebview \
      -skip qtlocation \
      -skip qthttpserver \
      -skip qtcoap \
      -skip qtgrpc \
      -skip qtproto \
      -skip qtquickeffectmaker \
      -skip qtquicktimeline \
      -skip qtstatemachine \
      -skip qtvirtualkeyboard \
      -skip qtwinextras \
      -skip qt5compat \
      -skip qtxmlpatterns \
      -nomake tests \
      -nomake examples \
      -feature-dbus \
      -feature-opengl \
      -opengl desktop \
      -feature-png \
      -feature-jpeg \
      -feature-freetype \
      -feature-harfbuzz \
      -feature-gui \
      -feature-widgets \
      -feature-xlib \
      -feature-xcb \
      -feature-xcb-xlib \
      -feature-xkbcommon \
      -feature-fontconfig \
      -feature-sessionmanager \
      -feature-openssl \
      -openssl-linked \
      -no-feature-glib \
      -no-feature-icu \
      -no-feature-system-zlib \
      -no-feature-system-png \
      -no-feature-system-jpeg \
      -no-feature-system-freetype \
      -no-feature-system-harfbuzz && \
    cmake --build . --parallel && \
    cmake --install . 

# ========== 最小実行ステージ ==========
FROM ubuntu:22.04

ARG INSTALL_PREFIX=/opt/qt6-static
COPY --from=builder ${INSTALL_PREFIX} ${INSTALL_PREFIX}

ENV PATH="${INSTALL_PREFIX}/bin:${PATH}"
